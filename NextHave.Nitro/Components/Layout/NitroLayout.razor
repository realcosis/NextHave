@using NextHave.BL.Services.Settings
@using NextHave.BL.Services.Users
@using System.Text
@using NextHave.BL.Clients
@using NextHave.Nitro.Authentications
@using NextHave.Nitro.Components.Layout
@using NextHave.BL.Parsers
@using NextHave.BL.Utils
@using System.Diagnostics

@inject ISettingsService settingsService
@inject IUsersService usersService
@inject NavigationManager navigation
@inject NextHaveAuthenticationStateProvider authenticationStateProvider

@inherits LayoutComponentBase

<HeadContent>
    <PageTitle>@hotelName</PageTitle>

    <script type="text/javascript">
        const NitroConfig = {
            "config.urls": ['/renderer-config.json', '/ui-config.json'],
            "sso.ticket": "@token",
            "forward.type": (new URLSearchParams(window.location.search).get('room') ? 2 : -1),
            "forward.id": (new URLSearchParams(window.location.search).get('room') || 0),
            "friend.id": (new URLSearchParams(window.location.search).get('friend') || 0)
        };
    </script>
    <script type="module" src="/nitro/index-D1dKApSo.js"></script>
    <link rel="modulepreload" crossorigin href="/nitro/vendor-C03uLZeS.js" />
    <link rel="stylesheet" href="/nitro/index.css" />

    @code {
        public string? token { get; set; }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            var userId = await authenticationStateProvider.GetUserIdFromToken();
            if (!userId.HasValue)
            {
                navigation.NavigateTo("/login");
                return;
            }
            
            token = await usersService.GetAndSetAuthToken(userId.Value);
        }
    }
</HeadContent>

<CascadingValue Value="hotelName">@Body</CascadingValue>

@code {
    string? hotelName => settingsService.GetSetting("hotel_name");
}